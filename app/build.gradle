plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.detekt
}

android {
    namespace "com.javernaut.whatthecodec"
    compileSdk 34
    defaultConfig {
        minSdk 21
        targetSdk 34

        versionCode 3601
        versionName "3.6.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    signingConfigs {
        google {
            if (!rootProject.ext["signing.google.alias"].isEmpty()) {
                keyAlias rootProject.ext["signing.google.alias"]
                keyPassword rootProject.ext["signing.google.passowrd"]
                storeFile file(rootProject.ext["signing.google.storeFile"])
                storePassword rootProject.ext["signing.google.storePassword"]
            }
        }
        amazon {
            if (!rootProject.ext["signing.amazon.alias"].isEmpty()) {
                keyAlias rootProject.ext["signing.amazon.alias"]
                keyPassword rootProject.ext["signing.amazon.passowrd"]
                storeFile file(rootProject.ext["signing.amazon.storeFile"])
                storePassword rootProject.ext["signing.amazon.storePassword"]
            }
        }
        huawei {
            if (!rootProject.ext["signing.huawei.alias"].isEmpty()) {
                keyAlias rootProject.ext["signing.huawei.alias"]
                keyPassword rootProject.ext["signing.huawei.passowrd"]
                storeFile file(rootProject.ext["signing.huawei.storeFile"])
                storePassword rootProject.ext["signing.huawei.storePassword"]
            }
        }
    }
    flavorDimensions = ["market"]
    productFlavors {
        google {
            dimension "market"
            ndk {
                // Since the App Bundle is used, there is no problem in packaging all these ABIs
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
            signingConfig signingConfigs.google
        }
        amazon {
            dimension "market"
            applicationIdSuffix ".amzn"
            ndk {
                // Amazon Appstore doesn't support multiple APKs for non-Amazon devices.
                // There is no point in x86 support here, as the majority of devices with the
                // Amazon Appstore are ARM-based. And it seems to be a common practice for other
                // apps in this market.
                abiFilters 'armeabi-v7a'
            }
            signingConfig signingConfigs.amazon
        }
        huawei {
            dimension "market"
            applicationIdSuffix ".huawei"
            ndk {
                // Huawei App Gallery supports App Bundle format
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
            signingConfig signingConfigs.huawei
        }
        ci {
            dimension "market"
            ndk {
                abiFilters 'x86'
            }
        }
    }
    lint {
        disable 'ExtraTranslation'
    }
}

dependencies {
    implementation libs.mediafile

    implementation libs.bundles.coroutines

    implementation libs.material

    implementation libs.bundles.lifecycle

    implementation libs.androidx.appcompat
    implementation libs.palette
    implementation libs.savedstate
    implementation libs.viewpager2
    implementation libs.browser
    implementation libs.window

    // TODO replace with own implementation
    implementation libs.liveevent

    implementation libs.bundles.compose
}

detekt {
    config.setFrom("$projectDir/../config/detekt/detekt.yml")
    buildUponDefaultConfig = true
}